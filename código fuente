import tkinter as tk
from tkinter import messagebox
import mysql.connector

# ====== CONEXIÓN MYSQL ======

import mysql.connector

class CConexion:

    def ConexionBaseDeDatos():
        try:
            conexion = mysql.connector.connect(
                user='root',
                password='200618Rm',
                host='localhost',
                database='ProyectoSQL',
                port='3306'
            )
            print("Conexión exitosa a la base de datos.")
            return conexion
        except mysql.connector.Error as error:
            print("Error al conectar a la base de datos: {}".format(error))
            return None

# ====== Informacion Estudiante ======

class Estudiantes:

    def ingresarEstudiante(matricula, nombre, correo, contraseña):
        conexion = CConexion.ConexionBaseDeDatos()
        if conexion is None:
            raise Exception("Error al conectar a la base de datos.")

        try:
            cursor = conexion.cursor()
            sql = "INSERT INTO Estudiante (matricula, nombre, correo, contraseña) VALUES (%s, %s, %s, %s);"
            valores = (matricula, nombre, correo, contraseña)
            cursor.execute(sql, valores)
            conexion.commit()
            print("Estudiante registrado correctamente.")
        except mysql.connector.errors.IntegrityError:
            raise Exception("La matrícula o el correo ya están registrados.")
        except Exception as e:
            raise Exception(f"Error al insertar el estudiante: {e}")
        finally:
            conexion.close()


# ====== COLORES ======

COLOR_FONDO = "#A1AFF7"
COLOR_ENCABEZADO = "#0429F1"
COLOR_TEXTO_BLANCO = "#FFFFFF"
COLOR_BOTON = "#3352F3" 
COLOR_CAMPOS = "#F1F5F9"

# ====== FUENTES ======

# ====== APLICACIÓN PRINCIPAL ======

class Aplicacion:
    def __init__(self, root):
        self.root = root
        self.root.title("Scripted Networks - Inicio")
        self.root.geometry("1750x1150")
        self.root.configure(bg=COLOR_FONDO) 

        # Fuentes

        self.fuente_titulo = ("Georgia", 22)
        self.fuente_etiquetas = ("Arial", 10, "bold")
        self.fuente_link = ("Arial", 9, "italic")

        self.frame_actual = None
        self.mostrar_login()

    def limpiar_frame(self):
        if self.frame_actual:
            self.frame_actual.destroy()

    def crear_campo(self, contenedor, texto, es_password=False):
        frame = tk.Frame(contenedor, bg=COLOR_FONDO)
        frame.pack(pady=15) 

        # Icono de etiqueta

        tk.Label(bg="#A5B4FC", font=("Arial", 12)).pack(anchor="w", padx=5)
        tk.Label(frame, text=texto.upper(), bg=COLOR_FONDO, fg="black",
                 font=self.fuente_etiquetas).pack(anchor="w", padx=5)

        entrada = tk.Entry(frame, width=40, font=("Arial", 12), bg=COLOR_CAMPOS, relief="flat",
                           show="*" if es_password else "")
        entrada.pack(ipady=8, pady=5)
        return entrada

    # ======= Mostrar inicio de sesión =======

    def mostrar_login(self):
        self.root.title("Scripted Networks - Inicio de Sesión")
        self.limpiar_frame()
        self.frame_actual = tk.Frame(self.root, bg=COLOR_FONDO)
        self.frame_actual.pack(expand=True, pady=10)

        # Encabezado azul

        encabezado = tk.Frame(self.frame_actual, bg=COLOR_ENCABEZADO, height=80)
        encabezado.pack(fill="x")
        tk.Label(encabezado, text="Inicio de sesión", bg=COLOR_ENCABEZADO, fg="white",
                 font=self.fuente_titulo).pack(pady=20)

        # Campos

        self.login_matricula = self.crear_campo(self.frame_actual, "Matrícula")
        self.login_correo = self.crear_campo(self.frame_actual, "Correo Electrónico")
        self.login_contraseña = self.crear_campo(self.frame_actual, "Contraseña", es_password=True)

        # Botón de inicio de sesión

        tk.Button(self.frame_actual, text="INICIAR SESIÓN", bg=COLOR_BOTON, fg="white",
                  width=25, height=2, font=("Arial", 12, "bold"),
                  command=self.iniciar_sesion).pack(pady=30)

        # Texto inferior (link de registro)

        frame_link = tk.Frame(self.frame_actual, bg=COLOR_FONDO)
        frame_link.pack()
        tk.Label(frame_link, text="¿No tienes cuenta?", bg=COLOR_FONDO, font=self.fuente_link).pack(side="left")

        link = tk.Label(frame_link, text="Registrarse", bg=COLOR_FONDO, fg=COLOR_BOTON,
                        font=self.fuente_link, cursor="hand2")
        link.pack(side="left", padx=5)
        link.bind("<Button-1>", lambda e: self.mostrar_registro())

    # ======= Mostrar registro de usuario =======

    def mostrar_registro(self):
        self.root.title("Scripted Networks - Registro de Usuario")
        self.limpiar_frame()
        self.frame_actual = tk.Frame(self.root, bg=COLOR_FONDO)
        self.frame_actual.pack(expand=True, pady=10)

        encabezado = tk.Frame(self.frame_actual, bg=COLOR_ENCABEZADO, height=80)
        encabezado.pack(fill="x")
        tk.Label(encabezado, text="Registro de usuario", bg=COLOR_ENCABEZADO, fg="white",
                 font=self.fuente_titulo).pack(pady=20)

        # Campos del registro
        
        self.reg_matricula = self.crear_campo(self.frame_actual, "Matrícula")
        self.reg_nombre = self.crear_campo(self.frame_actual, "Nombre")
        self.reg_correo = self.crear_campo(self.frame_actual, "Correo Electrónico")
        self.reg_contrasena = self.crear_campo(self.frame_actual, "Contraseña", es_password=True)

        # Botón de registrar

        tk.Button(self.frame_actual, text="REGISTRAR", bg=COLOR_BOTON, fg="white",
                  width=25, height=2, font=("Arial", 12, "bold"),
                  command=self.registrar_usuario).pack(pady=30)

    # Registrar usuario en la base de datos

    def registrar_usuario(self):
        matricula = self.reg_matricula.get()
        nombre = self.reg_nombre.get()
        correo = self.reg_correo.get()
        contraseña = self.reg_contrasena.get()
        if not (matricula and nombre and correo and contraseña):
            messagebox.showwarning("Campos vacíos", "Completa todos los campos.")
            return
        try:
            Estudiantes.ingresarEstudiante(matricula, nombre, correo, contraseña)
            messagebox.showinfo("Éxito", "Registro exitoso. Ahora puedes iniciar sesión.")
            self.mostrar_login()
        except Exception as e:
            messagebox.showerror("Error", str(e))

    # ====== Iniciar sesión en la aplicación ======

    def iniciar_sesion(self):
        matricula = self.login_matricula.get()
        correo = self.login_correo.get()
        contraseña = self.login_contraseña.get()

        if not (matricula and correo and contraseña):
            messagebox.showwarning("Campos vacíos", "Completa todos los campos.")
            return
        try:
            conexion = CConexion.ConexionBaseDeDatos()
            if conexion:
                cursor = conexion.cursor()
                cursor.execute("SELECT * FROM Estudiante WHERE matricula=%s AND correo=%s AND contraseña=%s",
                               (matricula, correo, contraseña))
                resultado = cursor.fetchone()
                conexion.close()
                if resultado:
                    self.root.destroy()
                    nueva_ventana = tk.Tk()
                    VentanaPrincipal(nueva_ventana, matricula)
                    nueva_ventana.mainloop()
                else:
                    messagebox.showerror("Error", "Credenciales incorrectas.")
            else:
                messagebox.showerror("Error", "No se pudo conectar a la base de datos.")
        except Exception as e:
            messagebox.showerror("Error", str(e))


# ====== VENTANA PRINCIPAL ======

class VentanaPrincipal:
    def __init__(self, root, matricula):
        self.root = root
        self.matricula = matricula
        self.root.title("Scripted Networks - Pantalla Principal")
        self.root.geometry("1750x1150")
        self.root.configure(bg=COLOR_FONDO)

        # Estado del menú

        self.menu_visible = False

        # Crear interfaz principal

        self.crear_encabezado()
        self.crear_bienvenida()
        self.crear_seccion(
            titulo="Ejercicios",
            descripcion="En este apartado podrás encontrar diversos\n"
                        "ejercicios de subnetting para practicar.",
            boton_text="Ir a Ejercicios",
            comando=self.abrir_ejercicios
        )
        self.crear_seccion(
            titulo="Quizzes",
            descripcion="Aquí podrás responder preguntas rápidas\n"
                        "para evaluar tus conocimientos.",
            boton_text="Ir a Quizzes",
            comando=self.abrir_quizzes
        )

        # Crear menú lateral (oculto al inicio)

        self.crear_menu_lateral()

    def crear_encabezado(self):
        encabezado = tk.Frame(self.root, bg=COLOR_ENCABEZADO, height=100)
        encabezado.pack(fill="x")

        # Botón menú (hamburguesa)

        menu_btn = tk.Button(encabezado, text="≡", font=("Arial", 28, "bold"),
                             bg=COLOR_ENCABEZADO, fg=COLOR_TEXTO_BLANCO, bd=0,
                             activebackground=COLOR_ENCABEZADO,
                             command=self.toggle_menu)
        menu_btn.pack(side="left", padx=25, pady=20)

        # Botón de editar perfil con muñequito
        
        perfil_frame = tk.Frame(encabezado, bg=COLOR_ENCABEZADO)
        perfil_frame.pack(side="right", padx=30)
        tk.Label(perfil_frame, text="Editar Perfil", font=("Arial", 12, "bold"),
                 bg=COLOR_ENCABEZADO, fg=COLOR_TEXTO_BLANCO).pack()
        canvas = tk.Canvas(perfil_frame, width=50, height=50,
                           bg=COLOR_ENCABEZADO, highlightthickness=0)
        canvas.create_oval(10, 10, 40, 40, fill="white")  # Cabeza
        canvas.create_oval(15, 30, 35, 45, fill="white")  # Cuerpo
        canvas.pack()
        canvas.bind("<Button-1>", self.abrir_editar_perfil)
        perfil_frame.bind("<Button-1>", self.abrir_editar_perfil)

    def crear_menu_lateral(self):

        # Frame lateral oculto

        self.panel = tk.Frame(self.root, bg=COLOR_ENCABEZADO, width=300, height=1150)
        self.panel.place(x=-300, y=0)

        # Botón de cerrar menú

        cerrar_btn = tk.Button(self.panel, text="✖", bg=COLOR_ENCABEZADO,
                               fg=COLOR_TEXTO_BLANCO, font=("Arial", 20, "bold"),
                               bd=0, activebackground=COLOR_ENCABEZADO,
                               command=self.toggle_menu)
        cerrar_btn.pack(pady=20, anchor="w", padx=15)

        # Botones del menú lateral

        def crear_boton(texto, comando=None):
            return tk.Button(self.panel, text=texto, bg=COLOR_ENCABEZADO,
                             fg=COLOR_TEXTO_BLANCO, font=("Arial", 14, "bold"),
                             relief="flat", width=22, height=2,
                             activebackground=COLOR_BOTON, command=comando)

        crear_boton("Historial de Ejercicios").pack(pady=15)
        crear_boton("Historial de Quizzes").pack(pady=15)
        crear_boton("Cerrar Sesion", comando=self.cerrar_sesion). pack(pady=15)
        crear_boton("Salir al Escritorio", comando=self.root.quit). pack(pady=15)

    def toggle_menu(self):
        if self.menu_visible:
            self.panel.place(x=-300, y=0)
        else:
            self.panel.place(x=0, y=0)
        self.menu_visible = not self.menu_visible

    def crear_bienvenida(self):
        frame = tk.Frame(self.root, bg=COLOR_FONDO)
        frame.pack(pady=15)
        tk.Label(frame, text="¡Bienvenido!", font=("Georgia", 22, "bold"),
                 bg=COLOR_FONDO).pack()
        tk.Label(frame,
                 text=("Nos alegra tenerte aquí.\n"
                       "Esta aplicación ha sido diseñada para ayudarte a aprender, practicar\n"
                       "y dominar los conceptos fundamentales de redes inteligentes,\n"
                       "combinando teoría con actividades interactivas."),
                 font=("Georgia", 14), bg=COLOR_FONDO, justify="center").pack()

    def crear_seccion(self, titulo, descripcion, boton_text, comando):
        contenedor = tk.Frame(self.root, bg=COLOR_FONDO, bd=1, relief="solid")
        contenedor.pack(pady=15, padx=40, fill="x")

        # Botón azul cuadrado

        icono_frame = tk.Frame(contenedor, width=120, height=120, bg=COLOR_BOTON)
        icono_frame.pack(side="left", padx=25, pady=15)
        icono_frame.pack_propagate(False)
        tk.Label(icono_frame, text=titulo, font=("Georgia", 14, "italic"),
                 bg=COLOR_BOTON, fg=COLOR_TEXTO_BLANCO).pack(expand=True)

        # Texto y botón

        contenido = tk.Frame(contenedor, bg=COLOR_FONDO)
        contenido.pack(side="left", pady=15)
        tk.Label(contenido, text="¿Qué encontrarás?",
                 font=("Arial", 14, "bold"), bg=COLOR_FONDO).pack(anchor="w")
        tk.Label(contenido, text=descripcion,
                 font=("Arial", 12), bg=COLOR_FONDO, justify="left").pack(anchor="w")
        tk.Button(contenido, text=boton_text, command=comando,
                  bg=COLOR_BOTON, fg="white", font=("Arial", 11, "bold"),
                  width=25).pack(pady=8)

    # --- Funciones ---

    def abrir_ejercicios(self):
        for widget in self.root.winfo_children():
            widget.destroy()
        VentanaEjercicios(self.root, self.volver_a_principal)

    def abrir_quizzes(self):
        for widget in self.root.winfo_children():
            widget.destroy()
        VentanaQuizzes(self.root, self.volver_a_principal)

    def cerrar_sesion(self):
        for widget in self.root.winfo_children():
            widget.destroy()
        Aplicacion(self.root)

    def volver_a_principal(self):
        for widget in self.root.winfo_children():
            widget.destroy()
        VentanaPrincipal(self.root, self.matricula)

    def abrir_editar_perfil(self, event=None):
        self.root.destroy()
        editar_root = tk.Tk()
        EditarPerfil(editar_root, self.matricula)
        editar_root.mainloop()

# ====== EDITAR PERFIL ======

class EditarPerfil:
    def __init__(self, root, matricula):
        self.root = root
        self.matricula = matricula
        self.root.title("Scripted Networks - Editar Perfil")
        self.root.geometry("1750x1150")
        self.root.configure(bg=COLOR_FONDO) 

        # ======= ENCABEZADO AZUL =======

        header = tk.Frame(self.root, bg=COLOR_ENCABEZADO, height=80)
        header.pack(fill="x")

        # Botón regresar 
        
        btn_volver = tk.Button(header, text="←", bg=COLOR_ENCABEZADO, fg="white",
                               font=("Arial", 20), bd=0, activebackground=COLOR_ENCABEZADO,
                               cursor="hand2", command=self.volver_a_principal)
        btn_volver.place(x=10, y=20)

        # Texto "Perfil" centrado

        tk.Label(header, text="Perfil", bg=COLOR_ENCABEZADO, fg="white",
                 font=("Georgia", 20)).pack(pady=20)

        # ======= ICONO DE USUARIO =======

        canvas = tk.Canvas(self.root, width=150, height=150, bg=COLOR_CAMPOS, highlightthickness=0)
        canvas.pack(pady=20)

        # Dibujar un icono de usuario 

        # Cabeza (círculo)

        canvas.create_oval(40, 20, 110, 90, fill="black")

        # Cuerpo (óvalo)

        canvas.create_oval(25, 80, 125, 140, fill="black")

    
        self.nombre_var = tk.StringVar()
        self.correo_var = tk.StringVar()

        # ======= CAMPOS DE ENTRADA =======

        self.crear_campo("Matrícula", tk.StringVar(value=self.matricula), editable=False)
        self.crear_campo("Nombre", self.nombre_var)
        self.crear_campo("Correo Electronico", self.correo_var)

        # ======= BOTÓN GUARDAR =======

        tk.Button(self.root, text="GUARDAR CAMBIOS", bg=COLOR_BOTON, fg="white",
                  font=("Arial", 12, "bold"), relief="flat", width=25, height=2,
                  cursor="hand2", command=self.actualizar_datos).pack(pady=40)

        # Cargar datos del estudiante
        
        self.cargar_datos_estudiante()

    # Crea campos de entrada

    def crear_campo(self, etiqueta, variable, editable=True):
        frame = tk.Frame(self.root, bg=COLOR_FONDO)
        frame.pack(pady=10)
        tk.Label(frame, text=etiqueta, bg=COLOR_FONDO, font=("Arial", 10, "bold")).pack(anchor="w", padx=10)
        entry = tk.Entry(frame, textvariable=variable, width=40, font=("Arial", 12), relief="flat")
        entry.pack(ipady=8, padx=10, pady=5)
        if not editable:
            entry.configure(state='readonly')

    # Cargar datos desde la base de datos

    def cargar_datos_estudiante(self):
        conexion = CConexion.ConexionBaseDeDatos()
        if conexion:
            cursor = conexion.cursor()
            cursor.execute("SELECT nombre, correo FROM Estudiante WHERE matricula = %s", (self.matricula,))
            resultado = cursor.fetchone()
            if resultado:
                self.nombre_var.set(resultado[0])
                self.correo_var.set(resultado[1])
            conexion.close()

    # Guardar cambios

    def actualizar_datos(self):
        nueva_nombre = self.nombre_var.get()
        nuevo_correo = self.correo_var.get()

        if not nueva_nombre or not nuevo_correo:
            messagebox.showwarning("Campos Vacíos", "Todos los campos deben estar llenos.")
            return

        conexion = CConexion.ConexionBaseDeDatos()
        if conexion:
            try:
                cursor = conexion.cursor()
                cursor.execute("UPDATE Estudiante SET nombre=%s, correo=%s WHERE matricula=%s",
                               (nueva_nombre, nuevo_correo, self.matricula))
                conexion.commit()
                messagebox.showinfo("Éxito", "Datos actualizados correctamente.")
                self.root.destroy()
                nueva_root = tk.Tk()
                VentanaPrincipal(nueva_root, self.matricula)
                nueva_root.mainloop()
            except Exception as e:
                messagebox.showerror("Error", str(e))
            finally:
                conexion.close()

    # Volver a ventana principal
    
    def volver_a_principal(self):
        self.root.destroy()
        nueva_root = tk.Tk()
        VentanaPrincipal(nueva_root, self.matricula)
        nueva_root.mainloop()


# ====== Ventana de Ejercicios ======

class VentanaEjercicios:
    def __init__(self, root, volver_callback):
        self.root = root
        self.volver_callback = volver_callback
        self.root.title("Scripted Networks - Ejercicios")
        self.root.configure(bg=COLOR_FONDO)

        # Barra superior 
        
        encabezado = tk.Frame(self.root, bg=COLOR_ENCABEZADO, height=60)
        encabezado.pack(fill="x")

        # Título centrado

        titulo = tk.Label(encabezado, text="Ejercicios", font=("Arial", 18, "bold"), bg=COLOR_ENCABEZADO, fg="white")
        titulo.pack(pady=10)

        # Contenedor principal

        contenedor = tk.Frame(self.root, bg=COLOR_FONDO)
        contenedor.pack(expand=True, fill="both", pady=20)

        # Lista de botones de ejercicios

        ejercicios = ["Ejercicio 1", "Ejercicio 2", "Ejercicio 3"]

        for i, nombre in enumerate(ejercicios):
            frame_item = tk.Frame(contenedor, bg=COLOR_FONDO)
            frame_item.pack(fill="x", pady=5)

            boton = tk.Button(frame_item, text=nombre, font=("Arial", 14),
                              bg=COLOR_BOTON, fg="white", activebackground=COLOR_BOTON,
                              relief="flat", padx=10, pady=5, width=15,
                              command=lambda n=nombre: self.abrir_ejercicio(n))
            boton.pack(pady=5)

            if i < len(ejercicios) - 1:

                # Línea divisoria
                
                separator = tk.Frame(contenedor, height=1, bg="black")
                separator.pack(fill="x", pady=2)

          # Boton Volver a ventana principal

        tk.Button(self.root, text="Volver a pantalla principal", bg=COLOR_BOTON, fg="white", width=20,
                  command=self.volver_callback).pack(pady=20)
        
    # Abrir ejercicio

    def abrir_ejercicio(self, nombre):
        messagebox.showinfo("Ejercicio", f"Abrir {nombre}")


 # ====== Ventana de Quizzes ======

class VentanaQuizzes:
    def __init__(self, root, volver_callback):
        self.root = root
        self.volver_callback = volver_callback
        self.root.title("Scripted Networks - Quizzes")
        self.root.configure(bg=COLOR_FONDO)

        # Barra superior

        encabezado = tk.Frame(self.root, bg=COLOR_ENCABEZADO, height=60)
        encabezado.pack(fill="x")

        # Título centrado

        titulo = tk.Label(encabezado, text="Quizzes", font=("Arial", 18, "bold"), bg=COLOR_ENCABEZADO, fg="white")
        titulo.pack(pady=10)

        # Contenedor principal

        contenedor = tk.Frame(self.root, bg=COLOR_FONDO)
        contenedor.pack(expand=True, fill="both", pady=20)

        # Lista de botones de quizzes

        quizzes = ["Quiz 1", "Quiz 2", "Quiz 3"]

        for i, nombre in enumerate(quizzes):
            frame_item = tk.Frame(contenedor, bg=COLOR_FONDO)
            frame_item.pack(fill="x", pady=5)

            boton = tk.Button(frame_item, text=nombre, font=("Arial", 14),
                              bg=COLOR_BOTON, fg="white", activebackground=COLOR_BOTON,
                              relief="flat", padx=10, pady=5, width=15,
                              command=lambda n=nombre: self.abrir_quiz(n))
            boton.pack(pady=5)

            # Línea divisoria

            if i < len(quizzes) - 1:
                separator = tk.Frame(contenedor, height=1, bg="black")
                separator.pack(fill="x", pady=2)

        tk.Button(self.root, text="Volver a pantalla principal", bg=COLOR_BOTON, fg="white", width=20,
                  command=self.volver_callback).pack(pady=20)
        
    # Abrir quiz

    def abrir_quiz(self, nombre):
        messagebox.showinfo("Quiz", f"Abrir {nombre}")



# Logica de los ejercicios y quizzes




# ====== INICIO DE LA APLICACIÓN ======

root = tk.Tk()
app = Aplicacion(root)
root.mainloop()