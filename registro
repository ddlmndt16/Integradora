import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

class Colores:
    def __init__(self):
        self.A_P = "#3B05C4"
        self.A_P2 = "#3352F3"
        self.A_P3 = "#687EF4"
        self.A_P4 = "#A1AFF7"
        self.B_A = "#F4F5FE"

color = Colores()

# ---------- Configuración de base de datos ----------
conn = sqlite3.connect('ProyectoIntegrador.db')
cursor = conn.cursor()
cursor.executescript("""
CREATE TABLE IF NOT EXISTS Estudiante (
    matricula TEXT PRIMARY KEY,
    nombre TEXT,
    correo TEXT UNIQUE,
    contraseña TEXT
);
""")
conn.commit()
conn.close()

# ---------- Funciones ----------
def registrar_estudiante():
    matricula = EN_matricula.get()
    nombre = EN_usuario.get()
    correo = EN_correo.get()
    contraseña = EN_clave.get()

    if not matricula or not nombre or not correo or not contraseña:
        messagebox.showwarning("Campos vacíos", "Todos los campos son obligatorios.")
        return

    try:
        conn = sqlite3.connect('ProyectoIntegrador.db')
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO Estudiante (matricula, nombre, correo, contraseña)
            VALUES (?, ?, ?, ?)
        """, (matricula, nombre, correo, contraseña))
        conn.commit()
        conn.close()
        messagebox.showinfo("Éxito", "Estudiante registrado correctamente.")
        EN_usuario.delete(0, tk.END)
        EN_correo.delete(0, tk.END)
        EN_clave.delete(0, tk.END)
        EN_matricula.delete(0, tk.END)
        actualizar_tabla()
    except sqlite3.IntegrityError:
        messagebox.showerror("Error", "Ya existe un estudiante con esa matrícula o correo.")
    except Exception as e:
        messagebox.showerror("Error", str(e))

def actualizar_tabla():
    for fila in tabla.get_children():
        tabla.delete(fila)
    conn = sqlite3.connect('ProyectoIntegrador.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Estudiante")
    estudiantes = cursor.fetchall()
    conn.close()
    for est in estudiantes:
        tabla.insert('', 'end', values=est)

# ---------- Interfaz ----------
app = tk.Tk()
app.title("Estudio-VLS | Registro de Estudiantes")
app.geometry("1200x700")
app.configure(bg=color.B_A)
app.resizable(False, False)

# ---------- Layout principal ----------
F_Izq = tk.Frame(app, bg=color.A_P3, width=250)
F_Sup = tk.Frame(app, bg=color.A_P, height=50)
F_Centro = tk.Frame(app, bg=color.B_A)

F_Izq.pack(side="left", fill="y")
F_Sup.pack(side="top", fill="x")
F_Centro.pack(expand=True, fill="both")

# ---------- Menú lateral ----------
tk.Label(F_Izq, text="Estudio-VLS", font=("Roboto", 16, "bold"), bg=color.A_P3, fg="white").pack(pady=20)

boton_inicio = tk.Button(F_Izq, text="Inicio", font=("Roboto", 12), bg=color.A_P2, fg="white")
boton_inicio.pack(fill="x", pady=5, padx=10)

boton_registro = tk.Button(F_Izq, text="Registro", font=("Roboto", 12), bg=color.A_P2, fg="white")
boton_registro.pack(fill="x", pady=5, padx=10)

# ---------- Encabezado superior ----------
tk.Label(F_Sup, text="Registro de Estudiantes", font=("Roboto", 16), bg=color.A_P, fg="white").pack(pady=10)

# ---------- Formulario y tabla en F_Centro ----------
F_formulario = tk.Frame(F_Centro, bg=color.B_A)
F_formulario.pack(pady=20)

def etiqueta_entry(texto, fila):
    label = tk.Label(F_formulario, text=texto, font=("Roboto", 13), fg="black", bg=color.B_A)
    label.grid(row=fila, column=0, padx=10, pady=5, sticky="e")
    entry = tk.Entry(F_formulario, width=30, font=("Roboto", 12))
    entry.grid(row=fila, column=1, padx=10, pady=5)
    return entry

EN_usuario = etiqueta_entry("Nombre de Usuario", 0)
EN_correo = etiqueta_entry("Correo electrónico", 1)
EN_clave = etiqueta_entry("Contraseña", 2)
EN_clave.config(show="*")
EN_matricula = etiqueta_entry("Matrícula", 3)

tk.Button(F_formulario, text="Registrar", command=registrar_estudiante,
          font=("Roboto", 13), bg=color.A_P, fg=color.B_A,
          width=15, height=2).grid(row=4, column=0, columnspan=2, pady=20)

# ---------- Tabla ----------
tk.Label(F_Centro, text="Estudiantes Registrados", font=("Roboto", 14, "bold"), bg=color.B_A).pack(pady=(10, 0))

tabla = ttk.Treeview(F_Centro, columns=("matricula", "nombre", "correo", "contraseña"), show="headings", height=10)
tabla.heading("matricula", text="Matrícula")
tabla.heading("nombre", text="Nombre")
tabla.heading("correo", text="Correo")
tabla.heading("contraseña", text="Contraseña")
tabla.pack(padx=20, pady=10, fill="x")

# Estilo tabla
estilo = ttk.Style()
estilo.theme_use("clam")
estilo.configure("Treeview", font=("Roboto", 10), rowheight=25, background="#ffffff", fieldbackground="#ffffff")
estilo.configure("Treeview.Heading", font=("Roboto", 11, "bold"), background=color.A_P4)

actualizar_tabla()
app.mainloop()